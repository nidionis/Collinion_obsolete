Collinion is powerful thanks to some basic keywords we can use in the algo. There are 3 main types :
	- C key words:
		switch, if, else, default, case, break, int, float...
		you can use any C-builtin word in collinion
	- collinion's relative cells
		CELL, NEW_CELL, ...
	- collinion's functions
		The upper-case words accepting an argument like
		NB_AROUND(), ...

You can check the cheatsheet if you have any doubt

Let's learn one new thing for each type :

	#################################

	- C key words:

	"else" is very useful for flexible conditions:

	if (condition) {
		action1 ;
	} else {		=> no condition needed
		action2 ;
	}

	you can use it followed by "if":

	if (condition1) {
		action1 ;
	} else if (condition2) {
		action1 ;
	}

	and even :
	
	if (condition1) {
		action1 ;
	} else if (condition2) {
		action1 ;
	}
		[ ... ]

	} else if (condition_n) {
		action_n ;
	} else {
		a_last_action
	}

	Be careful: at the first "true" condition, the program will skip all the others ! If you need to avoid that, just keep going with if statements (without else).

	#################################

RELATIVE CELLS:
	As you guessed, CELL represents the cell_type parsed and NEW_CELL is the cell type returned, but for fancier algos, it's possible to use
	CELL_UP
	CELL_UP_LEFT
	CELL_UP_RIGHT
	CELL_RIGHT
	CELL_LEFT
	CELL_DOWN
	CELL_DOWN_LEFT
	CELL_DOWN_RIGHT

with && (AND) and || (OR) statement, imagine the conditions you could make !

Another cool keyword is WALL which is -1 by default (a useless value) surrounding the matrix.
In our game of life, if you want all the on top alive:
	if (CELL_UP == WALL) {
		NEW_CELL = alive ;
	} else if ....

	#################################

COLLINION'S FUNCTIONS :

NB_AROUND(cell_type) returns the number of cell types surrounding CELL, but you can be more selective using:
	NB_SIDE_UP(cell_type)
	NB_SIDE_DOWN(cell_type)
	NB_SIDE_LEFT(cell_type)
	NB_SIDE_RIGHT(cell_type)
I'm sure you guessed what they are doing !
a clue : the number returned is between 0 and 3 :)

A last function for debugging:
PRINT("message")
it prints ON THE TERMINAL the message you want (quoted) when executed.

Try some new games with your new superpowers !
