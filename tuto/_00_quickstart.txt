Welcome to collinion universe

I guess you can't wait for a try, so you can execute a file using "./" in front of it.
Try in  terminal: 
	./run_collinion

	----------------------------------------------------------

However run_collinion is waiting for one (or two) arguments !
Try and enjoy:
	./run_collinion game_of_life.c

	|+| NoOb_n0te:
	|+| From a terminal check where you are using "pwd".
	|+| Change your directory using "cd".
	|+| List the directory using "ls".
	|+| ex:
	|+| > pwd
	|+| 	/home/my_home
	|+| > ls
	|+| 	collinion  Desktop  Downloads 
	|+| > cd collinion
	|+| > pwd
	|+| 	/home/my_home/collinion
	|+| > ls
	|+| 	examples	README.md	tuto
	|+| 	game_of_life.c	program		run_collinion
	|+| then ./run_collinion game_of_life.c should work
	|+| 
	|+| Otherwise, use a graphical interface,
	|*| jump in the collinion folder
	|*| click->right select "open in teminal" and finally:
	|*| 	./run_collinion game_of_life.c

	----------------------------------------------------------

run_collinion use the algo written in the .c file (in pseudo-C syntaxe) and execute any algo you can create !

Let's check "game_of_life.c" file
you can use any text editor (gedit, nano, vim...)
write:
	gedit game_of_life.c
	(or right-click and open with gedit)

	----------------------------------------------------------

Every words after // or between /* and */ are comments (not executed)

There is 3 main parts in a collinion file:
	- the cell declaration
	- the color setting
	- the algo[s]

	#################################

DECLARING A TYPE:
Just write (or copy/paste)
	DECLARE_TYPE: <a_type> ; (the type must finish by ";")

	note: the actual value of a type will be
		0 for the first
		1 for the second
		and so on ...
	
	Let's create a new type !
	(for example copy/paste: DECLARE_TYPE: zombie ; )

	#################################

SETTING THE COLORS:

Between the tags SET_COLORS and END, you MUST attribute a color to any cell you declared using:

	CELL_COLOR[ <cell_type> ] = <the_color> ;
						^
			       don't forget the ';'

Note:
	- check the config.h file, it contains the already attributed colors and you can create your own
	- you can replace a cell_type, or the color directly with the corresponding number
	- you can attribute the same color to several cells

	Let's attribute a color to our new cell !
	(my zombie will be green:  CELL_COLOR[zombie] = GREEN;  )

	#################################

QUICK START WITH THE ALGO:

The matrix is parsed by your algo, creating a new matrix (the cells are not modified "in place")

The algo is applied to each CELL in the matrix, and a NEW_CELL will be returned to the new matrix in the same position.

If the CELL does not correspond to any rule, NEW_CELL will be equal to CELL

We are using a C syntax (https://www.w3schools.com/c/c_conditions.php)

Basically, it works that way:

	if ( condition ) { action } ;

We can use:
	>  (GREATER)	>= (GREATER OR EQUAL)
	<  (LOWER)		<= (LOWER OR EQUAL)
	== (EQUAL)		! (NOT NULL)
	&& (AND)		|| (OR)

We will learn much more in the next tutorial, for now we can play around just by guessing.

Between "default:" and "break;" feel free to modify the rules and don't forget : you declared a new type :)

ex try:
	- if CELL is alive and there are more zombies around,
		the cell becomes a zombie
	- if the cell is a zombie and there are more living cells around
		the zombie is killed

